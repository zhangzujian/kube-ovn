name: Build x86 Image

on:
  pull_request:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'
  push:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  GO_VERSION: ''
  KIND_VERSION: v0.23.0
  GOSEC_VERSION: '2.20.0'
  HELM_VERSION: v3.14.4
  SUBMARINER_VERSION: '0.17.1'

jobs:
  build-kube-ovn-base:
    name: Build kube-ovn-base
    runs-on: ubuntu-22.04
    outputs:
      build-base: ${{ steps.check.outputs.build-base }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: check
        run: |
          if [ ${{ github.event_name }} != 'pull_request' ]; then
            exit
          fi
          if git diff --name-only HEAD^ HEAD | grep -q ^dist/images/Dockerfile.base$; then
            echo build-base=1 >> "$GITHUB_OUTPUT"
          fi

      - uses: jlumbroso/free-disk-space@v1.3.1
        if: steps.check.outputs.build-base == 1
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: false
          tool-cache: false
          swap-storage: false

      - uses: docker/setup-buildx-action@v3
        if: steps.check.outputs.build-base == 1

      - name: Build kube-ovn-base image
        id: build
        if: steps.check.outputs.build-base == 1
        run: |
            make base-amd64
            make base-tar-amd64

      - name: Upload base images to artifact
        if: steps.check.outputs.build-base == 1
        uses: actions/upload-artifact@v4
        with:
          name: kube-ovn-base
          path: image-amd64.tar

  build-kube-ovn-dpdk-base:
    name: Build kube-ovn-dpdk-base
    runs-on: ubuntu-22.04
    outputs:
      build-dpdk-base: ${{ steps.check.outputs.build-dpdk-base }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: check
        run: |
          if [ ${{ github.event_name }} != 'pull_request' ]; then
            exit
          fi
          if git diff --name-only HEAD^ HEAD | grep -q ^dist/images/Dockerfile.base-dpdk$; then
            echo build-dpdk-base=1 >> "$GITHUB_OUTPUT"
          fi

      - uses: jlumbroso/free-disk-space@v1.3.1
        if: steps.check.outputs.build-dpdk-base == 1
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: false
          tool-cache: false
          swap-storage: false

      - uses: docker/setup-buildx-action@v3
        if: steps.check.outputs.build-dpdk-base == 1

      - name: Build kube-ovn-dpdk-base image
        id: build
        if: steps.check.outputs.build-dpdk-base == 1
        run: |
          make base-amd64-dpdk
          make base-tar-amd64-dpdk

      - name: Upload dpdk base images to artifact
        if: steps.check.outputs.build-dpdk-base == 1
        uses: actions/upload-artifact@v4
        with:
          name: kube-ovn-dpdk-base
          path: image-amd64-dpdk.tar

  build-kube-ovn:
    name: Build kube-ovn
    runs-on: ubuntu-22.04
    needs:
      - build-kube-ovn-base
      - build-kube-ovn-dpdk-base
    steps:
      - uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: false
          tool-cache: false
          swap-storage: false

      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION || '' }}
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go env GOVERSION)" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Unit test
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          make ut

      - name: Install gosec
        run: |
          tmp=$(mktemp -d)
          archive="gosec_${{ env.GOSEC_VERSION }}_$(go env GOHOSTOS)_$(go env GOHOSTARCH).tar.gz"
          wget -q -O "$tmp/$archive" https://github.com/securego/gosec/releases/download/v${{ env.GOSEC_VERSION }}/$archive
          tar --no-same-owner -C "$tmp" -xzf "$tmp/$archive"
          install "$tmp/gosec" /usr/local/bin
          rm -rf $tmp

      - name: Download base images
        if: needs.build-kube-ovn-base.outputs.build-base == 1
        uses: actions/download-artifact@v4
        with:
          name: kube-ovn-base

      - name: Load base images
        if: needs.build-kube-ovn-base.outputs.build-base == 1
        run: docker load --input image-amd64.tar

      - name: Download dpdk base images
        if: needs.build-kube-ovn-dpdk-base.outputs.build-dpdk-base == 1
        uses: actions/download-artifact@v4
        with:
          name: kube-ovn-dpdk-base

      - name: Load dpdk base images
        if: needs.build-kube-ovn-dpdk-base.outputs.build-dpdk-base == 1
        run: docker load --input image-amd64-dpdk.tar

      - name: Build
        run: |
          go mod tidy
          git diff --exit-code
          make lint
          if [ ${{ needs.build-kube-ovn-base.outputs.build-base || 0 }} = 1 ]; then
            TAG=$(cat VERSION)
            docker tag kubeovn/kube-ovn-base:$TAG-amd64 kubeovn/kube-ovn-base:$TAG
            docker tag kubeovn/kube-ovn-base:$TAG-debug-amd64 kubeovn/kube-ovn-base:$TAG-debug
            make build-kube-ovn
          else
            make image-kube-ovn
          fi
          make tar-kube-ovn

      - name: Build dpdk
        run: |
          if [ ${{ needs.build-kube-ovn-dpdk-base.outputs.build-dpdk-base || 0 }} = 1 ]; then
            TAG=$(cat VERSION)
            docker tag kubeovn/kube-ovn-base:$TAG-amd64-dpdk kubeovn/kube-ovn-base:$TAG-dpdk
            make build-kube-ovn-dpdk
          else
            make image-kube-ovn-dpdk
          fi
          make tar-kube-ovn-dpdk

      - name: Upload images to artifact
        uses: actions/upload-artifact@v4
        with:
          name: kube-ovn
          path: kube-ovn.tar

      - name: Upload dpdk images to artifact
        uses: actions/upload-artifact@v4
        if: github.event_name != 'pull_request'
        with:
          name: kube-ovn-dpdk
          path: kube-ovn-dpdk.tar


  build-vpc-nat-gateway:
    name: Build vpc-nat-gateway
    runs-on: ubuntu-22.04
    steps:
      - uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: false
          tool-cache: false
          swap-storage: false

      - uses: actions/checkout@v4

      - name: Build
        run: |
          make image-vpc-nat-gateway
          make tar-vpc-nat-gateway

      - name: Upload image to artifact
        uses: actions/upload-artifact@v4
        with:
          name: vpc-nat-gateway
          path: vpc-nat-gateway.tar

  build-e2e-binaries:
    name: Build E2E Binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION || '' }}
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true
          cache: false

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go env GOVERSION)" >> "$GITHUB_ENV"

      - name: Lookup Go cache
        id: lookup-go-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-
          lookup-only: true

      - uses: jlumbroso/free-disk-space@v1.3.1
        if: steps.lookup-go-cache.outputs.cache-hit != 'true'
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: false
          tool-cache: false
          swap-storage: false

      - name: Go cache
        if: steps.lookup-go-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install ginkgo
        if: steps.lookup-go-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - run: make e2e-build
        if: steps.lookup-go-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.E2E_DIR }}

  lb-svc-e2e:
    name: LB Service E2E
    needs:
      - build-kube-ovn
      - build-vpc-nat-gateway
      - build-e2e-binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        index:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
    steps:
      - uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: false
          tool-cache: false
          swap-storage: false

      - uses: actions/checkout@v4

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION || '' }}
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true
          cache: false

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go env GOVERSION)" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1.10.0
        with:
          version: ${{ env.KIND_VERSION }}
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download kube-ovn image
        uses: actions/download-artifact@v4
        with:
          name: kube-ovn

      - name: Download vpc-nat-gateway image
        uses: actions/download-artifact@v4
        with:
          name: vpc-nat-gateway

      - name: Load images
        run: |
          docker load -i kube-ovn.tar
          docker load -i vpc-nat-gateway.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install jinjanator
          sudo --preserve-env=CI PATH=~/.local/bin:$PATH make kind-init
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Multus and Kube-OVN
        id: install
        run: make kind-install-lb-svc

      - name: Run E2E
        id: e2e
        working-directory: ${{ env.E2E_DIR }}
        env:
          E2E_BRANCH: ${{ github.base_ref || github.ref_name }}
        run: make kube-ovn-lb-svc-conformance-e2e

      - name: Collect k8s events
        if: failure() && steps.e2e.conclusion == 'failure'
        run: |
          kubectl get events -A -o yaml > lb-svc-e2e-events.yaml
          tar zcf lb-svc-e2e-events.tar.gz lb-svc-e2e-events.yaml

      - name: Upload k8s events
        uses: actions/upload-artifact@v4
        if: failure() && steps.e2e.conclusion == 'failure'
        with:
          name: lb-svc-e2e-${{ matrix.index }}-events
          path: lb-svc-e2e-events.tar.gz

      - name: Collect apiserver audit logs
        if: failure() && steps.e2e.conclusion == 'failure'
        run: |
          docker cp kube-ovn-control-plane:/var/log/kubernetes/kube-apiserver-audit.log .
          tar zcf lb-svc-e2e-audit-log.tar.gz kube-apiserver-audit.log

      - name: Upload apiserver audit logs
        uses: actions/upload-artifact@v4
        if: failure() && steps.e2e.conclusion == 'failure'
        with:
          name: lb-svc-e2e-${{ matrix.index }}-audit-log
          path: lb-svc-e2e-audit-log.tar.gz

      - name: kubectl ko log
        if: failure() && steps.e2e.conclusion == 'failure'
        run: |
          make kubectl-ko-log
          mv kubectl-ko-log.tar.gz lb-svc-e2e-ko-log.tar.gz

      - name: upload kubectl ko log
        uses: actions/upload-artifact@v4
        if: failure() && steps.e2e.conclusion == 'failure'
        with:
          name: lb-svc-e2e-${{ matrix.index }}-ko-log
          path: lb-svc-e2e-ko-log.tar.gz

      - name: Check kube ovn pod restarts
        if: ${{ success() || (failure() && (steps.install.conclusion == 'failure' || steps.e2e.conclusion == 'failure')) }}
        run: make check-kube-ovn-pod-restarts
