name: Build x86 Image

on:
  pull_request:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'
  push:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  GO_VERSION: ''
  KIND_VERSION: v0.23.0
  GOLANGCI_LINT_VERSION: 'v1.59.1'
  HELM_VERSION: v3.15.3
  SUBMARINER_VERSION: '0.18.0'

jobs:
  kube-ovn-conformance-e2e:
    name: Kube-OVN Conformance E2E
    # needs:
    #   - build-kube-ovn
    #   - build-e2e-binaries
    runs-on: ubuntu-24.04
    timeout-minutes: 40
    env:
      KIND_EXPERIMENTAL_PROVIDER: podman
    strategy:
      fail-fast: false
      matrix:
        ip-family:
          - ipv4
          # - ipv6
          # - dual
        mode:
          # - overlay
          - underlay
    steps:
      # - uses: jlumbroso/free-disk-space@v1.3.1
      #   with:
      #     android: true
      #     dotnet: true
      #     haskell: true
      #     docker-images: false
      #     large-packages: false
      #     tool-cache: false
      #     swap-storage: false

      - uses: actions/checkout@v4

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION || '' }}
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true
          cache: false

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go env GOVERSION)" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1.10.0
        with:
          version: ${{ env.KIND_VERSION }}
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      # - name: Download image
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: kube-ovn

      # - name: Load image
      #   run: podman load --input kube-ovn.tar

      - name: Set environment variables
        run: |
          echo "VLAN_ID=$(($RANDOM%4096))" >> "$GITHUB_ENV"
          if [ $(($RANDOM%2)) -ne 0 ]; then
            # run as root and use valgrind to debug memory leak
            echo "VERSION=$(cat VERSION)-debug" >> "$GITHUB_ENV"
            echo "DEBUG_WRAPPER=valgrind" >> "$GITHUB_ENV"
          fi

      - name: Create kind cluster
        run: |
          pipx install jinjanator
          set -x
          podman system info
          id
          systemctl status podman
          podman ps -a
          podman network ls
          kind get clusters
          make kind-init-${{ matrix.ip-family }}
          sleep 30
          sudo sh -c 'ps aux | grep apiserver'
          kubectl -n kube-system rollout status ds kube-proxy
      
      - name: Prepare node network
        run: |
          podman network create --dns 114.114.114.114,8.8.8.8 --ipv6 -o mtu=1500 -o vlan=$VLAN_ID vlan-$VLAN_ID
          kind -n kube-ovn get nodes | while read node; do
            podman network connect vlan-$VLAN_ID $node
            podman exec $node ip address flush dev eth1 scope global
          done

      - name: Install Kube-OVN
        id: install
        env:
          VLAN_NIC: eth1
        run: make kind-install-${{ matrix.mode }}-${{ matrix.ip-family }}

      # - name: Run E2E
      #   id: e2e
      #   working-directory: ${{ env.E2E_DIR }}
      #   env:
      #     E2E_BRANCH: ${{ github.base_ref || github.ref_name }}
      #     E2E_IP_FAMILY: ${{ matrix.ip-family }}
      #     E2E_NETWORK_MODE: ${{ matrix.mode }}
      #   run: |
      #     make kube-ovn-conformance-e2e
      #     make kind-install-kubevirt
      #     make kube-ovn-kubevirt-e2e

      # - name: Collect k8s events
      #   if: failure() && steps.e2e.conclusion == 'failure'
      #   run: |
      #     kubectl get events -A -o yaml > kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-events.yaml
      #     tar zcf kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-events.tar.gz kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-events.yaml

      # - name: Upload k8s events
      #   uses: actions/upload-artifact@v4
      #   if: failure() && steps.e2e.conclusion == 'failure'
      #   with:
      #     name: kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-events
      #     path: kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-events.tar.gz

      # - name: Collect apiserver audit logs
      #   if: failure() && steps.e2e.conclusion == 'failure'
      #   run: |
      #     docker cp kube-ovn-control-plane:/var/log/kubernetes/kube-apiserver-audit.log .
      #     tar zcf kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-audit-log.tar.gz kube-apiserver-audit.log

      # - name: Upload apiserver audit logs
      #   uses: actions/upload-artifact@v4
      #   if: failure() && steps.e2e.conclusion == 'failure'
      #   with:
      #     name: kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-audit-log
      #     path: kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-audit-log.tar.gz

      # - name: kubectl ko log
      #   if: failure() && steps.e2e.conclusion == 'failure'
      #   run: |
      #     make kubectl-ko-log
      #     mv kubectl-ko-log.tar.gz kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-ko-log.tar.gz

      # - name: upload kubectl ko log
      #   uses: actions/upload-artifact@v4
      #   if: failure() && steps.e2e.conclusion == 'failure'
      #   with:
      #     name: kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-ko-log
      #     path: kube-ovn-conformance-e2e-${{ matrix.mode }}-${{ matrix.ip-family }}-ko-log.tar.gz

      # - name: Check kube ovn pod restarts
      #   if: ${{ success() || (failure() && (steps.install.conclusion == 'failure' || steps.e2e.conclusion == 'failure')) }}
      #   run: make check-kube-ovn-pod-restarts

      # - name: Check valgrind result
      #   run: |
      #     if [ "x$DEBUG_WRAPPER" != "xvalgrind" ]; then
      #       exit
      #     fi

      #     kubectl -n kube-system rollout restart ds ovs-ovn
      #     kubectl -n kube-system rollout status ds ovs-ovn
      #     sleep 10
      #     kubectl -n kube-system rollout restart deploy ovn-central
      #     kubectl -n kube-system rollout status deploy ovn-central
      #     while true; do
      #       if [ $(kubectl -n kube-system get pod -l app=ovs -o name | wc -l) -eq $(kubectl get node -o name | wc -l) ]; then
      #         break
      #       fi
      #       sleep 1
      #     done
      #     kubectl ko log ovn
      #     kubectl ko log ovs

      #     for daemon in ovsdb-nb ovsdb-sb ovn-northd ovn-controller ovsdb-server ovs-vswitchd; do
      #       echo "Checking if valgrind log file for $daemon exists..."
      #       find kubectl-ko-log -type f -name "$daemon.valgrind.log.[[:digit:]]*" -exec false {} + && exit 1
      #     done

      #     find kubectl-ko-log -type f -name '*.valgrind.log.*' | while read f; do
      #       if grep -qw 'definitely lost' "$f"; then
      #         echo "Memory leak detected in $(basename $f | awk -F. '{print $1}')."
      #         echo $f
      #         cat "$f"
      #         exit 1
      #       fi;
      #     done

      # - name: Cleanup
      #   run: timeout -k 10 180 sh -x dist/images/cleanup.sh
